
























































































         :sort $input > $output
         :sort $input > $output
  * Triplet "A->B#C->D" will be stored under db/B.txt file.
  * Triplet "A->B->C" will be stored under db/B.txt file.
  * Triplet "A->http://moirai2.gsc.riken.jp/akira/B->C" will be stored under db/moirai2.gsc.rien.jp/akira/B.txt file.
"https://moirai2.github.io/schema/daemon/bash":["output=\"$workdir/sort.txt\"","sort $input > $output"],
"https://moirai2.github.io/schema/daemon/input":"$input",
"https://moirai2.github.io/schema/daemon/output":"$output"
# Create a new node ID.
# Moirai2
## Author
## Description
## Install
## Licence
## Structure
## Usage
### Example1
### Example2
### Example3
### Example4
### Example5
### Example6
### Example7
### moirai2.pl
### rdf.pl
#### command
#### copy
#### delete
#### download
#### drop
#### dump
#### executes
#### filesize
#### history
#### html
#### input
#### insert
#### install
#### linecount
#### load
#### ls
#### md5
#### merge
#### mv
#### network
#### network
#### newnode
#### object
#### prompt
#### query
#### reindex
#### replace
#### rm
#### rmexec
#### save
#### select
#### seqcount
#### sync
#### update
#Bash    :output="$workdir/sort.txt"
#Bash    :output="$workdir/sort.txt"
#Command :sort.json [input] [output]
#Command :sort.json [input] [output]
#Input   :input
#Input   :input
#Input: input? input.txt
#Input: input? input.txt
#Input: input? input.txt
#Output  :output
#Output  :output
#URL     :https://moirai2.github.io/command/text/sort.json
#URL     :https://moirai2.github.io/command/text/sort.json
$ git clone https://github.com/moirai2/moirai2.git project
$ ls output.txt
$ ls output.txt
$ ls output.txt
$ ls output.txt
$ ls rdf/nXXXXXXXXXXXXXX
$ ls rdf/nXXXXXXXXXXXXXX
$ perl moirai2.pl -h https://moirai2.github.io/command/text/sort.json
$ perl moirai2.pl -i 'A->B->$file' -o '$file->C->$result' exec << 'EOS'
$ perl moirai2.pl CMDURL ARGV [ARGV ..]
$ perl moirai2.pl command << EOF
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json input.txt
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json input.txt
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json input.txt output.txt
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json input.txt output.txt
$ perl moirai2.pl https://moirai2.github.io/command/text/sort.json input=input.txt output=output.txt
$ perl moirai2.pl sort.json
$ perl rdf.pl select
* A command json file used in the previous usage, specifies command lines, input, and output.
* After computation, sorted file will be output to rdf/nXXXXXXXXXXXXXX/sort.txt 
* All information are store din RDF triplet (subject, predicate, object).
* All the files under db directory will be loaded.
* All the triplets stored in sqlite3 database will be written to triplet files.
* By assigning output path, result will not be output to temporary file, but instead location can be specified.
* Check file size and register.
* Check md5 and register.
* Check the input and output variable names with a help command.
* Computation will finish in few seconds.  All temporary files will be removed.
* Convert RDF sqlite3 DB => db directory/files.
* Convert db directory/files <=> RDF sqlite3 DB.
* Convert db directory/files => RDF sqlite3 DB.
* Copy database to a new database with query.
* Count lines and register number.
* Count sequences and register number.
* Default database path is ./rdf.sqlite3.
* Delete RDF with defined subject, predicate, and object.
* Delete the table
* Download a file path and record information.
* Dump database in JSON format.
* Dump database in TSV format.
* Explaining usage by examples.
* Filename can be anything.
* For example:
* Get key-val from database with a query.
* I have prepared basic command lines at <a href="https://moirai2.github.io/command">https://moirai2.github.io/command</a>.
* If there are multiple objects, results will be printed out in one line with a space.
* If time stamp of triplet files under db directory are the latest, it'll proceed "load" command.
* If timestamp of sqlite3 database is latest, it'll proceed "save" command.
* Import RDF from TSV.
* In any cases, executed information will be stored in the Resource Description Framework (RDF) database.
* Input multiple objects.
* Insert a new RDF (subject, predicate, object).
* Install software URL.
* It's possible to specify both input and output paths.
* Let's say there are information in the database.
* List directory and register database.
* Merge database and database arguments.
* Order doesn't matter in this case.
* Order of arguments do matter and differ by commands.
* Order of input and output in arguments can be checked with a help option.
* Order of input/output are specified in '#Command' line.
* Output execute information in html mode.
* Output execute information in shell mode.
* Output execute information.
* Path to input file can be assigned through argument, so you can skip prompt part.
* Path to input file will be prompted, so enter a filepath and push return.
* Print all triplets excluding moirai2 system.
* Print out object with specified subject, predicate, and object.
* Prompt and new triplet to RDF database.
* Register execution of a command in the database.
* Reindex database.
* Remove a file and record.
* Remove currently running executes.
* Replace node with a new value.
* Replace variable in database and also move file to a new path.
* Run a command with moirai2.pl.
* SUB->PRE->[user defined] will be inserted.
* Select database subject, predicate, object.
* Sqlite3 database will be reset and reloaded with triplet under db directory files.
* Strength of moirai2 is commands can run from data store in the RDF database.
* Temporary bash shell, stdout, stderr files will be written to rdf/nXXXXXXXXXXXXXX/ (XXXXXXXXXXXXXX is datetime).
* The command lines don't have to be specified through json.
* The triplet files doesn't have to be grouped by the predicate.
* This command checks timestamp of sqlite3 database file and text triplet files under db directory.
* This is an example of a sort command using a json file I prepared: <a href="https://moirai2.github.io/command/text/sort.json">sort.json</a>.
* To see the information about the command JSON, use help option.
* Triplet files are grouped by predicate.
* Unused triplet files will be removed.
* Update/replace new object with defined subject and predicate.
* Use '%' for a wildcard.
* When [return] is typed, DEFAULT will be used instead.
* When user just hit return.
* When user typed value.
* You can create your own command json file and use from a local directory or your website.
* You can run a command using a json file in your local directory.
* You can specify input and output by variables.
* You can specify input path in argument and can avoid prompt message.
* You can view the database by rdf.pl.
> rdf.pl -d DB insert D E F
> rdf.pl -d DB network
> rdf.pl -d DB newnode
> rdf.pl -d DB select % % C
> rdf.pl -d DB select A B %
> rdf.pl -d DB select A B C
> rdf.pl prompt A B "What is object?" C
> rdf.pl prompt A B "What is object?" C
> rdf.pl select 
> rdf.pl select 
> tsv.txt
>perl rdf.pl query 'A->B->$c'
>rdf.pl -d DB delete A B C
>rdf.pl -d DB dump > TSV
>rdf.pl -d DB import < tsv.txt
>rdf.pl -d DB object A B
>rdf.pl -d DB update A B D
A   B   C
A   B   C
A   B   C
A   B   C
A   B   C
A   B   C
A   B   D
A   B   D
A   B   something
A B C
A B C
A B C
A B C.txt
A B C.txt
A B D.txt
A->B->C
A->B->C
A->B->C
A->B->C
A->B->C
A->B->C
A->B->C
A->B->D
A->B->D
A->B->D
C D
C.txt	https://moirai2.github.io/schema/file/timeremoved	1595086775
Commands are all web based (https://moirai2.github.io/command).
D   E   F
D   E   F
D->E->F
D->E->F
EOF
EOS
For Linux, you can install through 'apt-get'?
Input, output, parameter, time, stdout, stderr are recorded in RDF sqlite3 database.
List of default commands are here:
MOIRAI2 is a scientific workflow system.
To install moirai2 to a directory named "project".
Use git command to clone project to your computer.
What is object?
What is object? something
You can check the git by checking its version.
[MIT](https://github.com/tcnksm/tool/blob/master/LICENCE)
[{"c":"C"}]
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
```shell
akira.hasegawa@riken.jp
bash2cwl has moved to https://github.com/moirai2/bash2cwl
deleted 1
git --version
git is preinstalled in MacOS.
https://moirai2.github.io/command
inserted 1
moirai2/
move C.txt to D.txt
output.txt
output.txt
output.txt
output.txt
perl moirai2.pl -h https://moirai2.github.io/command/text/sort.json
rdf.pl -d DB -D DB2 copy QUERY
rdf.pl -d DB -f json command < JSON
rdf.pl -d DB -f json dump > JSON
rdf.pl -d DB delete SUB PRE OBJ
rdf.pl -d DB download URL
rdf.pl -d DB drop
rdf.pl -d DB dump > TSV
rdf.pl -d DB executes
rdf.pl -d DB history
rdf.pl -d DB html
rdf.pl -d DB import < TSV
rdf.pl -d DB input SUB PRE OBJECT OBJECT2 [..]
rdf.pl -d DB insert SUB PRE OBJ
rdf.pl -d DB install URL
rdf.pl -d DB load
rdf.pl -d DB ls '-' < STDIN
rdf.pl -d DB merge DB2 DB3
rdf.pl -d DB mv C.txt D.txt
rdf.pl -d DB mv FROM TO
rdf.pl -d DB network > TSV
rdf.pl -d DB newnode > NODE
rdf.pl -d DB object SUB PRE OBJ > VARIABLE
rdf.pl -d DB prompt SUB PRE QUESTION DEFAULT
rdf.pl -d DB query QUERY > JSON
rdf.pl -d DB reindex
rdf.pl -d DB replace C D
rdf.pl -d DB replace FROM TO
rdf.pl -d DB rm C.txt
rdf.pl -d DB rm PATH
rdf.pl -d DB rmexec
rdf.pl -d DB save
rdf.pl -d DB select SUB PRE OBJ
rdf.pl -d DB sync
rdf.pl -d DB update SUB PRE OBJ
rdf.pl filesize DIR/FILE > TSV
rdf.pl linecount DIR/FILE > TSV
rdf.pl ls DIR/FILE > LIST
rdf.pl md5 DIR/FILE > TSV
rdf.pl seqcount DIR/FILE > TSV
rdf.sqlite3#node1
rdf.sqlite3#node1	https://moirai2.github.io/command/text/sort.json#input	input/sn/sn_RNA_1.fa
rdf.sqlite3#node1	https://moirai2.github.io/command/text/sort.json#output	ouput.txt
rdf.sqlite3#node1	https://moirai2.github.io/schema/daemon/command	https://moirai2.github.io/command/text/sort.json
rdf.sqlite3#node1	https://moirai2.github.io/schema/daemon/timeended	1595992099
rdf.sqlite3#node1	https://moirai2.github.io/schema/daemon/timestarted	1595992099
rdf.sqlite3#node1	https://moirai2.github.io/schema/daemon/timethrown	1595992099
remove C.txt
replaced
result=wc/${file.basename}.txt
sort.txt
sort.txt
updated 1
wc -l < $file > $result
{
}
├── README.md - This readme file
├── bin/ - Stores binary executables (automatically made when running moirai2.pl)
├── commandeditor.html - HTML for editing command json.
├── commandviewer.html - Viewintg a command json.
├── js/ - Javascript used for MOIRAI2 manipulation through a browser.
├── moirai2.php - Used for MOIRAI2 manipulation through a browser.
├── moirai2.pl - Computes MOIRAI2 commands/network.
├── rdf.pl - Script to handle Resource Description Framework (RDF) using SQLite3 database.
