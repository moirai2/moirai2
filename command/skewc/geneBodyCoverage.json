{"https://moirai2.github.io/schema/daemon/input":["$reference","$input"],"https://moirai2.github.io/schema/daemon/bash":["outdir=\"$tmpdir/out\"","skewness=\"$tmpdir/skewness.txt\"","geneBodyCoverage.pl -o $outdir $reference $input > $skewness","rm $workdir/$stderrfile"],"https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/name":"geneBodyCoverage.pl","https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use File::Temp qw/tempfile/;","use File::Basename;","use POSIX qw(floor ceil);","use DirHandle;","use strict;","use Getopt::Std;","use Time::localtime;","use vars qw($opt_o $opt_p);","getopts('o:p');","############################## help ##############################","if(scalar(@ARGV)<2){","\tprint STDERR \"\\n\";","\tprint STDERR \"PROGRAM:\\n\";","\tprint STDERR \"  - Does gene body coverage calculation using algorithm from RSeQC geneBody_coverage.py\\n\";","\tprint STDERR \"  - RSeQC website: http://rseqc.sourceforge.net)\\n\";","\tprint STDERR \"  \\n\";","\tprint STDERR \"USAGE: geneBodyCoverage.pl -o \\$outdir \\$reference \\$input > \\$skewness\\n\";","\tprint STDERR \"  \\$input      BAM/BED file or directory you want to calculate\\n\";","\tprint STDERR \"  \\$outdir     Output directory (default=\".\")\\n\";","\tprint STDERR \"  \\$reference  gene model downloaded from RSeQC website\\n\";","\tprint STDERR \"  \\$skewness   Skewness value\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Option:\\n\";","\tprint STDERR \"     -o  Output directory (default='coverage')\\n\";","\tprint STDERR \"     -p  Skip plot command lines in R output\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Note:\\n\";","\tprint STDERR \"  - When directory is specified, BAM/BED files under that directory will be computed\\n\";","\tprint STDERR \"  - Download gene model of your species from the website\\n\";","\tprint STDERR \"    URL: http://rseqc.sourceforge.net/#download-gene-models-update-on-08-07-2014\\n\";","\tprint STDERR \"  - Mapping data from Genomics10X data have no 'chr' string in a reference column.\\n\";","\tprint STDERR \"    Make sure reference names match\\n\";","\tprint STDERR \"  - Index file of gene model will be created under same directory.\\n\";","\tprint STDERR \"  - Two files will be created \\$basename.txt \\$basename.r.\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Requires:\\n\";","\tprint STDERR \"  - samtools (https://samtools.github.io)\\n\";","\tprint STDERR \"  - bedtools (https://bedtools.readthedocs.io/en/latest/)\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Author:\\n\";","\tprint STDERR \"  - Akira Hasegawa (akira.hasegawa\\@riken.jp)\\n\";","\tprint STDERR \"\\n\";","\texit(1);","}","if(!`which samtools`){","\tprint STDERR \"ERROR  samtools not installed\\n\";","\tprint STDERR \"       Download from https://samtools.github.io/)\\n\";","\texit(1);","}","if(!`which bedtools`){","\tprint STDERR \"ERROR  bedtools not installed\\n\";","\tprint STDERR \"       Download from https://bedtools.readthedocs.io/\\n\";","\texit(1);","}","############################## MAIN ##############################","my @inputfiles=@ARGV;","my $reference=shift(@inputfiles);","my $outdir=(defined($opt_o))?$opt_o:\"coverage\";","mkdir($outdir);","@inputfiles=expandFiles(\"\\\\.(bed|bam)\\$\",@inputfiles);","if(checkChrName($inputfiles[0])){$reference=noChrFile($reference);}","my $indexfile=\"$reference.index\";","if(!-e $indexfile){calculatePercentile($reference,$indexfile);}","foreach my $inputfile(@inputfiles){","\tmy $startTime=time();","\tmy $convertedflag=0;","\tmy $basename=($inputfile=~/\\.bam$/)?basename($inputfile,\".bam\"):basename($inputfile,\".bed\");","\tif($inputfile=~/\\.bam$/){$inputfile=convertBamToBed($reference,$inputfile);$convertedflag=1;}","\tmy @counts=geneBodyCoverage($indexfile,$inputfile,$reference);","\tif($convertedflag){unlink($inputfile);}","\toutputText($basename,@counts);","\toutputR($basename,$opt_p,@counts);","\tmy $endTime=time();","\tmy $diff=$endTime - $startTime;","\tprint \"$basename\\t\".pearsonMomentCoefficient(@counts).\"\\t\".int($diff).\" sec\\n\";","}","############################## checkChrName ##############################","sub checkChrName{","\tmy $inputfile=shift();","\tmy $hash={};","\tif($inputfile=~/\\.bam$/){","\t\topen(IN,\"samtools view -H $inputfile|\");","\t\twhile(<IN>){","\t\t\tif(/SN:(\\S+)/){$hash->{$1}++;}","\t\t}","\t\tclose(IN);","\t}else{","\t\topen(IN,$inputfile);","\t\twhile(<IN>){","\t\t\tif($_!~/^\\@/){last;}","\t\t\tif(/SN:(\\S+)/){$hash->{$1}++;}","\t\t}","\t\tclose(IN);","\t}","\tforeach my $key(keys(%{$hash})){if($key=~/^chr/){return 0;}}","\treturn 1;","}","############################## noChrFile ##############################","sub noChrFile{","\tmy $reference=shift();","\topen(IN,$reference);","\tmy $count=0;","\tmy $chrExists=0;","\twhile(<IN>){","\t\tchomp;","\t\tif(/^#/){next;}","\t  my @tokens=split(/\\t/);","\t\tif($tokens[0]=~/^chr/){$chrExists=1;}","\t\tif($count++>10){last;}","\t}","\tclose(IN);","\tif($chrExists==0){return $reference;}","\tmy $outfile=dirname($reference).\"/\".basename($reference,\".bed\").\".nochr.bed\";","\tif(-e $outfile){return $outfile;}","\tprint STDERR \"# Creating no chr version of gene model: $reference\\n\";","\topen(IN,$reference);","\topen(OUT,\">$outfile\");","\twhile(<IN>){","\t\tif(/^#/){print \"$_\";next;}","\t  chomp;","\t  my @tokens=split(/\\t/);","\t  if($tokens[0]=~/^.+_(.+)v(\\d+)_random$/){$tokens[0]=\"$1.$2\";}","\t  elsif($tokens[0]=~/^.+_(.+)v(\\d+)_alt$/){$tokens[0]=\"$1.$2\";}","\t  elsif($tokens[0]=~/^.+_(.+)v(\\d+)$/){$tokens[0]=\"$1.$2\";}","\t  elsif($tokens[0]=~/^chrM$/){$tokens[0]=\"MT\";}","\t  elsif($tokens[0]=~/^chr(.+)$/){$tokens[0]=$1;}","\t  print OUT join(\"\\t\",@tokens).\"\\n\";","\t}","\tclose(IN);","\tclose(OUT);","\treturn $outfile;","}","############################## outputText ##############################","sub outputText{","\tmy @counts=@_;","\tmy $basename=shift(@counts);","\topen(OUT,\">$outdir/$basename.geneBodyCoverage.txt\");","\tmy @numbers=();","\tfor(my $i=1;$i<101;$i++){push(@numbers,$i);}","\tprint OUT \"Percentile\t\".join(\"\\t\",@numbers).\"\\n\";","\tprint OUT \"$basename\\t\".join(\"\\t\",@counts).\"\\n\";","\tclose(OUT);","}","############################## outputR ##############################","sub outputR{","\tmy @counts=@_;","\tmy $basename=shift(@counts);","\tmy $nopdf=shift(@counts);","\tmy $basename2=$basename;","\t$basename2=~s/[^\\w\\.]/_/g;","\topen(OUT,\">$outdir/$basename.geneBodyCoverage.r\");","\tprint OUT \"$basename2 <- c(\".join(\",\",normalize(@counts)).\")\\n\";","\tif($nopdf){return;}","\tprint OUT \"\\n\";","\tprint OUT \"\\n\";","\tprint OUT \"pdf(\\\"$outdir/$basename.geneBodyCoverage.curves.pdf\\\")\\n\";","\tprint OUT \"x=1:100\\n\";","\tprint OUT \"icolor = colorRampPalette(c(\\\"#7fc97f\\\",\\\"#beaed4\\\",\\\"#fdc086\\\",\\\"#ffff99\\\",\\\"#386cb0\\\",\\\"#f0027f\\\"))(1)\\n\";","\tprint OUT \"plot(x,$basename2,type='l',xlab=\\\"Gene body percentile (5'->3')\\\", ylab=\\\"Coverage\\\",lwd=0.8,col=icolor[1])\\n\";","\tprint OUT \"dev.off()\\n\";","\tclose(OUT);","}","############################## normalize ##############################","sub normalize{","\tmy @counts=@_;","\tmy $max=$counts[0];","\tmy $min=$counts[0];","\tforeach my $count(@counts){","\t\tif($count>$max){$max=$count;}","\t\tif($count<$min){$min=$count;}","\t}","\tmy @temp=();","\tforeach my $count(@counts){","\t\tif(($max-$min)!=0){push(@temp,($count-$min)/($max-$min));}","\t\telse{push(@temp,0);}","\t}","\treturn @temp;","}","############################## expandFiles ##############################","sub expandFiles{","\tmy @files=@_;","\tmy $suffix=shift(@files);","\tmy @temp=();","\tforeach my $file(@files){","\t\tif(-f $file){push(@temp,$file);next;}","\t\tmy $dh=DirHandle->new($file);","\t\tforeach my $f($dh->read()){if($f=~/$suffix/){push(@temp,\"$file/$f\");}}","\t}","\treturn @temp;","}","############################## convertBamToBed ##############################","sub convertBamToBed{","\tmy $reference=shift();","\tmy $bamfile=shift();","\tmy ($fh,$filteredfile)=tempfile(SUFFIX=>'.bam');","\tprint STDERR \"# Filtering BAM file: $bamfile\\n\";","\tsystem(\"samtools view -q 4 -bF 0x704 $bamfile > $filteredfile\");","\t#system(\"samtools view -q 0 -bF 0x704 $bamfile > $filteredfile\");","\tmy ($fh2,$splitfile)=tempfile(SUFFIX=>'.bed');","\tprint STDERR \"# Converting BAM to BED: $splitfile\\n\";","\tsystem(\"bedtools bamtobed -splitD -i $filteredfile > $splitfile\");","\tclose($fh2);","\tunlink($filteredfile);","\tmy ($fh3,$intersectfile)=tempfile(SUFFIX=>'.bed');","\tprint STDERR \"# Intersect BED with reference: $intersectfile\\n\";","\tsystem(\"bedtools intersect -u -a $splitfile -b $reference > $intersectfile\");","\tclose($fh3);","\tunlink($splitfile);","\tmy $count=`samtools view -c -f 1 $bamfile`;","\tchomp($count);","\tif($count>0){","\t\tprint STDERR \"# Remove intersecting paired-ends: $intersectfile\\n\";","\t\treturn removeOverlappingPairRegion($intersectfile);","\t}else{","\t\treturn $intersectfile;","\t}","}","############################## removeOverlappingPairRegion ##############################","sub removeOverlappingPairRegion{","\tmy $intersectfile=shift();","\tmy ($fh4,$sortfile)=tempfile(SUFFIX=>'.bed');","\tclose($fh4);","\tsystem(\"sort -k 4 $intersectfile > $sortfile\");","\tunlink($intersectfile);","\tmy ($fh5,$removedfile)=tempfile(SUFFIX=>'.bed');","\topen(IN,$sortfile);","\tmy $previd;","\tmy @pairs=();","\tmy $line=<IN>;","\twhile(defined($line)){","\t\tchomp($line);","\t\tmy ($chr,$start,$end,$id,$score,$strand)=split(/\\t/,$line);","\t\t$line=undef;#next iteration from IN","\t\tif($id=~/^(.+)\\/2$/){","\t\t\tmy $id2=$1;","\t\t\tif($id2 ne $previd){$previd=$id2;@pairs=();}","\t\t\tfor(my $i=0;$i<scalar(@pairs);$i++){","\t\t\t\tmy ($chr2,$start2,$end2)=@{$pairs[$i]};","\t\t\t\tif($chr ne $chr2){next;}","\t\t\t\tif(($start<$end2)&&($start2<$end)){","\t\t\t\t\tif($start2>=$start){","\t\t\t\t\t\tif($end2<$end){$line=\"$chr\\t$end2\\t$end\\t$id\\t$score\\t$strand\\n\";}#pass to next iteration","\t\t\t\t\t\t$end=$start2;","\t\t\t\t\t}else{","\t\t\t\t\t\t$start=$end2;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}elsif($id=~/^(.+)\\/1$/){","\t\t\tmy $id2=$1;","\t\t\tif($id2 ne $previd){$previd=$id2;@pairs=();}","\t\t\tpush(@pairs,[$chr,$start,$end]);","\t\t}else{","\t\t\tprint STDERR \"# Non paired ID found...\\n\";","\t\t}","\t\tif($start<$end){print $fh5 \"$chr\\t$start\\t$end\\t$id\\t$score\\t$strand\\n\";}","\t\tif(!defined($line)){$line=<IN>;}","\t}","\tclose(IN);","\tunlink($sortfile);","\tmy ($fh6,$finalfile)=tempfile(SUFFIX=>'.bed');","\tclose($fh6);","\tsystem(\"sort $removedfile > $finalfile\");","\tunlink($removedfile);","\treturn $finalfile;","}","############################## pearsonMomentCoefficient ##############################","sub pearsonMomentCoefficient{","\tmy @counts=@_;","\tmy $midValue=$counts[int(scalar(@counts)/2)];","\tmy $sigma=standardDeviation(@counts);","\tmy @tmp=();","\tforeach my $count(@counts){","\t\tif($sigma!=0){push(@tmp,(($count-$midValue)/$sigma)**3);}","\t\telse{push(@tmp,0);}","\t}","\treturn average(@tmp);","}","sub average{","\tmy @data=@_;","\tmy $total = 0;","\tforeach(@data){$total += $_;}","\tmy $average=$total/scalar(@data);","\treturn $average;","}","sub standardDeviation{","\tmy @data=@_;","\tmy $average=average(@data);","\tmy $sqtotal = 0;","\tforeach(@data){$sqtotal+=($average-$_)**2;}","\tmy $n=scalar(@data)-1;","\tmy $std=($sqtotal/$n)**0.5;","\treturn $std;","}","############################## calculatePercentile ##############################","sub calculatePercentile{","\tmy $reference=shift();","\tmy $indexfile=shift();","\tprint STDERR \"# Calculating percentile of gene model: $reference...\\n\";","\topen(OUT,\">$indexfile\");","\topen(IN,$reference);","\twhile(<IN>){","\t\tif(/^#/){next;}","\t\tchomp;","\t\tmy ($chr,$start,$end,$id,$score,$strand,$thickStart,$thickEnd,$itemRgb,$blockCount,$blockSizes,$blockStarts)=split(/\\t/);","\t\tmy @starts=split(/,/,$blockStarts);","\t\tmy @sizes=split(/,/,$blockSizes);","\t\tmy @exons=();","\t\tfor(my $i=0;$i<scalar(@starts);$i++){","\t\t\tmy $size=$sizes[$i];","\t\t\tfor(my $j=0;$j<$size;$j++){push(@exons,$start+$starts[$i]+$j);}","\t\t}","\t\tmy $length=scalar(@exons);","\t\tif($length<100){next;}","\t\tmy @percents=();","\t\tfor(my $i=1;$i<101;$i++){","\t\t\tmy $k=($length-1)*$i/100.0;","\t\t\tmy $f=floor($k);","\t\t\tmy $c=ceil($k);","\t\t\tif($f==$c){","\t\t\t\tpush(@percents,int($exons[int($k)]));","\t\t\t}else{","\t\t\t\tmy $d0=$exons[int($f)]*($c-$k);","\t\t\t\tmy $d1=$exons[int($c)]*($k-$f);","\t\t\t\t#https://www.mihr.net/perl/rounding.html","\t\t\t\tpush(@percents,int($d0+$d1+0.50000000000008));","\t\t\t}","\t\t}","\t\tprint OUT \"$id\\t$chr\\t$strand\\t\".join(\"\\t\",@percents).\"\\n\";","\t}","\tclose(IN);","\tclose(OUT);","}","############################## geneBodyCoverage ##############################","sub geneBodyCoverage{","\tmy $indexfile=shift();","\tmy $bedfile=shift();","\tmy $reference=shift();","\tmy $positions={};","\tmy $pairs={};","\tprint STDERR \"# Loading reference positions: $indexfile\\n\";","\topen(IN,$indexfile);","\tmy $positions={};","\twhile(<IN>){","\t\tchomp;","\t\tmy ($id,$chr,$strand,@percents)=split(/\\t/);","\t\tif(!exists($positions->{$chr})){$positions->{$chr}={};}","\t\tforeach my $position(@percents){$positions->{$chr}->{$position}=0;}","\t}","\tclose(IN);","\tprint STDERR \"# Counting positions: $bedfile\\n\";","\topen(IN,$bedfile);","\twhile(<IN>){","\t\tchomp;","\t\tmy ($chr,$start,$end,$id,$score,$strand)=split(/\\t/);","\t\tfor(my $i=$start;$i<$end;$i++){","\t\t\tif(exists($positions->{$chr}->{$i})){","\t\t\t\t$positions->{$chr}->{$i}++;","\t\t\t}","\t\t}","\t}","\tclose(IN);","\tprint STDERR \"# Calculating genebody coverage: $bedfile\\n\";","\topen(IN,$indexfile);","\tmy @counts=();","\tfor(my $i=0;$i<100;$i++){$counts[$i]=0;}","\t#my $ids={};","\twhile(<IN>){","\t\tchomp;","\t\tmy ($id,$chr,$strand,@percents)=split(/\\t/);","\t\tfor(my $i=0;$i<100;$i++){","\t\t\tmy $pos=$percents[$i];","\t\t\tif(exists($positions->{$chr}->{$pos})&&$positions->{$chr}->{$pos}>0){","\t\t\t\tmy $index=($strand eq \"+\")?$i:(99-$i);","\t\t\t\t$counts[$index]+=$positions->{$chr}->{$pos};","\t\t\t\t#$ids->{$id}=1;","\t\t\t}","\t\t}","\t}","\tclose(IN);","\t#open(IN,$reference);","\t#while(<IN>){","\t#\tchomp;","\t#\tif(/^#/){print \"$_\\n\";next;}","\t#\tmy ($chr,$start,$end,$id,$score,$strand,$thickStart,$thickEnd,$itemRgb,$blockCount,$blockSizes,$blockStarts)=split(/\\t/);","\t#\tif(!exists($ids->{$id})){next;}","\t#\tprint \"$_\\n\";","\t#}","\t#close(IN);","\treturn @counts;","}","############################## printTable ##############################","sub printTable{","\tmy @out=@_;","\tmy $return_type=$out[0];","\tif(lc($return_type) eq \"print\"){$return_type=0;shift(@out);}","\telsif(lc($return_type) eq \"array\"){$return_type=1;shift(@out);}","\telsif(lc($return_type) eq \"stderr\"){$return_type=2;shift(@out);}","\telse{$return_type= 2;}","\tprintTableSub($return_type,\"\",@out);","}","sub printTableSub{","\tmy @out=@_;","\tmy $return_type=shift(@out);","\tmy $string=shift(@out);","\tmy @output=();","\tfor(@out){","\t\tif(ref( $_ ) eq \"ARRAY\"){","\t\t\tmy @array=@{$_};","\t\t\tmy $size=scalar(@array);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"[]\\n\";}","\t\t\t\telsif($return_type==1){push(@output,$string.\"[]\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"[]\\n\";}","\t\t\t}else{","\t\t\t\tfor(my $i=0;$i<$size;$i++){push(@output,printTableSub($return_type,$string.\"[$i]=>\\t\",$array[$i]));}","\t\t\t}","\t\t} elsif(ref($_)eq\"HASH\"){","\t\t\tmy %hash=%{$_};","\t\t\tmy @keys=sort{$a cmp $b}keys(%hash);","\t\t\tmy $size=scalar(@keys);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"{}\\n\";}","\t\t\t\telsif($return_type==1){push( @output,$string.\"{}\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"{}\\n\";}","\t\t\t}else{","\t\t\t\tforeach my $key(@keys){push(@output,printTableSub($return_type,$string.\"{$key}=>\\t\",$hash{$key}));}","\t\t\t}","\t\t}elsif($return_type==0){print \"$string\\\"$_\\\"\\n\";}","\t\telsif($return_type==1){push( @output,\"$string\\\"$_\\\"\");}","\t\telsif($return_type==2){print STDERR \"$string\\\"$_\\\"\\n\";}","\t}","\treturn wantarray?@output:$output[0];","}"]},"https://moirai2.github.io/schema/daemon/output":["$outdir","$skewness"]}