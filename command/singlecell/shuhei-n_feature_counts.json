{"https://moirai2.github.io/schema/daemon/input":["$dataset","$genome","$files","$gencodegtf","$generegion",{"$samtools":"samtools"},{"$featureCounts":"featureCounts"}],"https://moirai2.github.io/schema/daemon/bash":["outdir=\"$workdir/out\"","mkdir -p $outdir","featureCounts.sh $outdir $dataset $genome $files $gencodegtf $generegion $samtools $featureCounts"],"https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/name":"featureCounts.sh","https://moirai2.github.io/schema/daemon/script/code":["#!/bin/sh","# count gene expression #","# genome contamination  #","# input: star mapping result directories, containing *.bam and *.Log.final.out #","# output: $dir/$genome/$dirname/$sampleid.*.bed $dir/$genome/$dirname/$sampleid.expression $dir/$genome/$dirname/$sampleid.log #","# .count.bed         count                                #","# .tpm.bed           tpm (tags per million mapped read)   #","# .fpkm.bed          fpkm                                 #","# .tpm_assigned.bed  tpm (tags per million assinged read) #","# .fpkm_assigned.bed fkpm (fpk million assigned read)     #","# .expression        gencode chr tstart_gtf end strand length count tpm fpkm tpm_assigned fpkm_assigned #","# .log               feature count log #","set -eu","########################################","","dir=$1","dataset=$2","genome=$3","indir=$4","files=`ls $indir`","gencodegtf=$5","#/osc-fs_home/shuhei-n/moirai/singlecell/files/gencode.vM9.annotation.gtf","#/osc-fs_home/shuhei-n/moirai/singlecell/files/gencode.v24.annotation.gtf","generegion=$6","#/osc-fs_home/shuhei-n/moirai/singlecell/files/${genome}_geneid_region","samtools=$7","#/osc-fs_home/shuhei-n/moirai/singlecell/tools/samtools-1.2/samtools","featureCounts=$8","#/osc-fs_home/shuhei-n/moirai/singlecell/tools/subread-1.5.0-p1-Linux-x86_64/bin/featureCounts","mapq=10","########################################","cd $dir","outdir=$genome","mkdir -p $outdir","","ckerror=0","","fn(){","if [ ! $( mkdir $outdir/$sampleid 2>&1 | sed 's/ //g' ) ];then","outdir=$outdir/$sampleid","","############# check single or paired ############","#$samtools view -H $f |grep ^@PG -m1|awk '{for(i=1;i<=NF;i++){if($i==\"--readFilesIn\"){c=1}else if(c==1){if($i~\"--\"){exit}else{print $i}}}}'|wc -l","if [ `$samtools view -H $f |grep ^@PG -m1|awk '{for(i=1;i<=NF;i++){if($i==\"--readFilesIn\"){c=1}else if(c==1){if($i~\"--\"){exit}else{print $i}}}}'|wc -l` -eq 2 ];then","$featureCounts -p -Q $mapq -a $gencodegtf -o $outdir/$sampleid $f 2> $outdir/$sampleid.log","div=2","elif [ `$samtools view -H $f |grep ^@PG -m1|awk '{for(i=1;i<=NF;i++){if($i==\"--readFilesIn\"){c=1}else if(c==1){if($i~\"--\"){exit}else{print $i}}}}'|wc -l` -eq 1 ];then","$featureCounts -Q $mapq -a $gencodegtf -o $outdir/$sampleid $f 2> $outdir/$sampleid.log","div=1","else","echo \"bam header error : \" $f 1>&2","break;","fi","","############ make expression table ##############","if [ -e $outdir/$sampleid ]; then","assignedreads=`cat  $outdir/$sampleid.summary | grep ^Assigned | cut -f2`","mappedreads=`$samtools view -h -F 0x100 -q $mapq $f | grep -v ^@ | wc -l`","mappedreads=`expr $mappedreads / $div`","echo -e \"mappedreads_q10\\t\"$mappedreads >> $outdir/$sampleid.summary","","if [ $mappedreads -eq 0 -o $assignedreads -eq 0 ]; then","echo \"count error, mappedreads : \" $f 1>&2","cat $outdir/$sampleid | grep -v \"^#\" | sed -n '2,$p' | awk 'BEGIN{OFS=\"\\t\"}{","print $1,$2,$3,$4,$5,$6,$7,\"0\",\"0\",\"0\",\"0\"}' > $outdir/$sampleid.expression","else","#culc. tpm fpkm","cat $outdir/$sampleid | grep -v \"^#\" | sed -n '2,$p' | awk 'BEGIN{OFS=\"\\t\"}{","tpm_a=$7*1000000/'$assignedreads';tpm=$7*1000000/'$mappedreads';","fpkm_a=tpm_a*1000/$6; fpkm=tpm*1000/$6;","print $1,$2,$3,$4,$5,$6,$7,tpm,fpkm,tpm_a,fpkm_a}' > $outdir/$sampleid.expression","fi","","# sort by geneid #","cat $outdir/$sampleid.expression| sort -k1,1 | join -t$'\\t' /dev/stdin $generegion |awk 'BEGIN{OFS=\"\\t\"}{print $12,$13-1,$14,$1,$7,$8,$9,$10,$11,$15}' | sort -k1,1 -k2,2n > $outdir/$sampleid.bed.tmp","cat $outdir/$sampleid.bed.tmp | awk 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$4,$5,$10}' > $outdir/$sampleid.count.bed","cat $outdir/$sampleid.bed.tmp | awk 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$4,$6,$10}' > $outdir/$sampleid.tpm.bed","cat $outdir/$sampleid.bed.tmp | awk 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$4,$7,$10}' > $outdir/$sampleid.fpkm.bed","cat $outdir/$sampleid.bed.tmp | awk 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$4,$8,$10}' > $outdir/$sampleid.tpm_assigned.bed","cat $outdir/$sampleid.bed.tmp | awk 'BEGIN{OFS=\"\\t\"}{print $1,$2,$3,$4,$9,$10}' > $outdir/$sampleid.fpkm_assigned.bed","","gzip -f $outdir/$sampleid.*.bed $outdir/$sampleid.expression","rm $outdir/$sampleid $outdir/$sampleid.bed.tmp","else","","### if there is feature count error, try again after sort bam file ###","echo \"feature count error : \" $f 1>&2","if [ $ckerror -eq 0 ]; then","ckerror=1","tmpf=`echo $f | sed 's|/|_|g'`","$samtools sort -n $f $tmpf.sort","f=$tmpf.sort.bam","fn","else","ckerror=0","fi","fi","#    mv $outdir/$sampleid.* $outdir/$sampleid","fi","}","","for f in $files","do","f=\"$indir/$f\"","if [ ! -s $f ]; then","echo \"bam error, emtpy : \" $f 1>&2","else","ff=${f##*/}","sampleid=`basename $ff | cut -d'.' -f1`","outdir=$genome/$dataset","mkdir -p $outdir","fn","fi","done"]},"https://moirai2.github.io/schema/daemon/output":"$outdir"}
