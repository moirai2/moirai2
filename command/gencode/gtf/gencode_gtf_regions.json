{"https://moirai2.github.io/schema/daemon/input":["$input"],"https://moirai2.github.io/schema/daemon/bash":["region.pl $input $workdir/split","output=($(ls $workdir/split/*.gz))"],"https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/name":"region.pl","https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use IO::File;","use strict 'vars';","use File::Basename;","use Getopt::Std;","my $file=$ARGV[0];","my $outdir=$ARGV[1];","mkdir($outdir);","my $writers={};","my @types=(\"gene\",\"exon\",\"CDS\",\"UTR\",\"transcript\",\"start_codon\",\"stop_codon\",\"intron\");","foreach my $type(@types){$writers->{$type}=IO::File->new(\"|gzip -c>$outdir/$type.bed.gz\");}","my $command=\"$file\";","if($file=~/\\.bz2$/){$command=\"bzip2 -cd $file|\"}","if($file=~/\\.gz$/){$command=\"gzip -cd $file|\"}","open(IN,$command);","my @gene_regions=();","my @exon_regions=();","my @cds_regions=();","my @utr_regions=();","my @transcript_regions=();","my @start_codon_regions=();","my @stop_codon_regions=();","my $current_strand;","my $gene_name;","my $chromosome;","while(<IN>){","chomp;","my ($seqname,$source,$feature,$start,$end,$score,$strand,$frame,$attribute)=split(/\\t/);","if($attribute=~/gene_name \"(\\S+)\"/){if($gene_name ne $1){printResult();$gene_name=$1;}}","$chromosome=$seqname;","$current_strand=$strand;","my $region=[$start,$end,];","if($feature eq \"gene\"){@gene_regions=pushRegion(\\@gene_regions,$region);}","elsif($feature eq \"exon\"){@exon_regions=pushRegion(\\@exon_regions,$region);}","elsif($feature eq \"CDS\"){@cds_regions=pushRegion(\\@cds_regions,$region);}","elsif($feature eq \"UTR\"){@utr_regions=pushRegion(\\@utr_regions,$region);}","elsif($feature eq \"transcript\"){@transcript_regions=pushRegion(\\@transcript_regions,$region);}","elsif($feature eq \"start_codon\"){@start_codon_regions=pushRegion(\\@start_codon_regions,$region);}","elsif($feature eq \"stop_codon\"){@stop_codon_regions=pushRegion(\\@stop_codon_regions,$region);}","}","close(IN);","printResult();","foreach my $type(@types){close($writers->{$type});}","############################## printResult ##############################","sub printResult{","if(!defined($gene_name)){return;}","my @intron_regions=calculateIntron(\\ÃŸ@exon_regions);","printBed($writers->{\"gene\"},\\@gene_regions);","printBed($writers->{\"exon\"},\\@exon_regions);","printBed($writers->{\"intron\"},\\@intron_regions);","printBed($writers->{\"CDS\"},\\@cds_regions);","printBed($writers->{\"UTR\"},\\@utr_regions);","printBed($writers->{\"transcript\"},\\@transcript_regions);","printBed($writers->{\"start_codon\"},\\@start_codon_regions);","printBed($writers->{\"stop_codon\"},\\@stop_codon_regions);","@gene_regions=();","@exon_regions=();","@cds_regions=();","@utr_regions=();","@transcript_regions=();","@start_codon_regions=();","@stop_codon_regions=();","}","############################## calculateIntron ##############################","sub calculateIntron{","my $exons=shift();","my @introns=();","my $prevend;","foreach my $exon(@{$exons}){","my ($start,$end)=@{$exon};","if(defined($prevend)){if($start-$prevend-2>0){push(@introns,[$prevend+1,$start-1]);}}","$prevend=$end;","}","return @introns;","}","############################## printBed ##############################","sub printBed{","my $writer=shift();","my $array=shift();","foreach my $line(@{$array}){","my ($start,$end)=@{$line};","$start--;","print $writer \"$chromosome\\t$start\\t$end\\t$gene_name\\t0\\t$current_strand\\n\";","}","}","############################## pushRegion ##############################","sub pushRegion{","my $regions=shift();","my ($start,$end)=@{shift()};","if(scalar(@{$regions})==0){return ([$start,$end]);}","my @array=();","my $found=0;","my $start1=0;","foreach my $line(@{$regions}){","my ($start2,$end2)=@{$line};","if($found==1){","if($end<$start2){push(@array,[$start1,$end]);push(@array,[$start2,$end2]);$found=2;}","elsif($end<=$end2){push(@array,[$start1,$end2]);$found=2;}","}elsif($found==2){","push(@array,[$start2,$end2]);","}elsif($end<$start2-1){","push(@array,[$start,$end]);","push(@array,[$start2,$end2]);","$found=2;","}elsif($end2<$start-1){","push(@array,[$start2,$end2]);","}elsif($start<$start2){","if($end<=$end2){push(@array,[$start,$end2]);$found=2;}","else{$start1=$start;$found=1;}","}else{","if($end<=$end2){push(@array,[$start2,$end2]);$found=2}","else{$start1=$start2;$found=1;}","}","}","if($found==0){push(@array,[$start,$end]);}","elsif($found==1){push(@array,[$start1,$end]);}","return @array;","}"]},"https://moirai2.github.io/schema/daemon/outputs":"$output"}
